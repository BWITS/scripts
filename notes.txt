Course_Overview/Course_Intro.md:

* (good morning) Good morning everyone. Thank you all for attending Puppet Fundamentals. My name is ___ my email address ___
* (about me) I recently joined Puppet Labs as a PSE.  Prior to this I rolled out puppet to manage a large fleet of commercial Unix systems.
* (introduce Terri) We also have Terri Haber here from Puppet Labs and she's an experienced trainer and she'll be supervising today.
* (ask questions) Please feel free to ask questions - this is intended to be an interactive course.  Questions help you learn and help others learn.
* (fire escapes and toilets) Some housekeeping - fire escape ___ toilets are ___
* (lunch and breaks) Lunch will be provided at 12pm and we'll have a break at 10.30am and 2.30pm.
* (introductions) Let's go round the classroom and get everyone to introduce themselves.  Please tell me where you work and how much you know about Puppet already.

Course_Overview/Course_Objectives.md:

The course is intended for system administrators and developers who
want a grounding in the fundamentals of the Puppet language and best practices.

Course_Overview/Course_Overview.md:

In this course you will (among other things):
* learn to write puppet modules
* learn how to test those modules
* learn how to use the Enterprise Console
* learn about MCollective / Live Management
* and much more...

Course_Overview/Course_Agenda_1.md:

On day #1 we intend to cover:

Course_Overview/Course_Agenda_2.md:

On day #2:

Course_Overview/Course_Agenda_3.md:

On day #3:

About_Puppet/About_Puppet.md:
 
* Luke Kanies wrote Puppet in 2005, after having spent a lot of time consulting for CFengine.
* He had become frustrated with CFengine by that stage and was finding it hard to contribute back to the CFengine project.
* He converted his consulting company to Reductive Labs and later renamed it Puppet Labs.
* (In 2011...) In 2011 Puppet Labs released its first commercial product, Puppet Enterprise.
* (now read last 5 bullets) Now we have: over 1000 forge modules; over 6000 active community members; over 20000 users; and some sites doing more than 50000 nodes.
* Support for all major linuxes, BSDs, Windows, Solaris, AIX, and Mac OS X.

About_Puppet/Data_Flow_for_Nodes.md:

Let's have a look at a high level at the data flow in Puppet:
* A agent sends facts and requests its so-called "catalog"
* The master responds by combining those facts with your manifest code to compile a catalog.
* The agent applies that catalog and sends back a report.
* Optionally, that report is sent on to a report handler.

Any questions?
 
About_Puppet/How_Puppet_Works.md:

* (define) We define the desired state of our systems.
* (simulate) Simulate proposed changes.
* (enforce) Enforce the desired state automatically.
* (report) Report back on any changes.

About_Puppet/Introducing_PE.md:

Puppet Enterprise adds:
* Convenient installer - the components of Puppet are installed and configured automatically.
* The Enterprise Console - honestly, it's crap.
* Orchestration - Live Management is available in the Console.
* VMware cloud provisioner - only available in PE.

About_Puppet/Introducing_Puppet.md:

With Puppet we can:
* Increase our productivity (spend more time on interesting work, less time fighting fires).
* Provisioning in minutes instead of weeks (who's ever been told or worse told customers that it will take more than a week to provision a new server?)
* Eliminates configuration drift.
* Makes changes visible.
* Cuts the software release cycle down to days or even hours.

About_Puppet/Objectives.md:

In this lesson we will:
* Identify the challenges of managing infrastructure at scale.
* Talk about how Puppet overcomes these challenges.
* And we'll look at the community resources available to you.

(ignore last bullet.)

About_Puppet/PE_Stack.md:

Here we see components in the PE stack.

About_Puppet/Puppet_Customers.md:

* Here are some of our customers.
* Customers in Sydney and Australia include the big four banks, the Telcos, Federal Government, and Universities.

About_Puppet/Puppet_Works_Define2.md:

Here is an example of some Puppet code.
Can anyone guess what that does?
Does anyone feel they couldn't guess what that does?

About_Puppet/Resources.md:

Services:
* Bootstrap
* Quickstart
* Code audits
* Customised
Support:
* Two levels of support available - standard and premium.
* See <http://puppetlabs.com/services/support-plans/> for more info
Training:
* Fundamentals, Advanced, Extending - also customised training available.

Concepts/Objectives.md:

(SKIP this.)

Concepts/complications.md:

(Read this slide word for word slowly from the top.)

Concepts/declarations.md:

A resource declaration is made up of:
* A type (user)
* A title (elmo)
* And attribute -> value pairs.

Concepts/describe_state.md:

* This little piece of code describes the "desired state".
* Now imagine that the actual state is different - suppose the GID is "staff" and home is something different.
* We refer to this situation as "configuration drift".  We say the actual configuration has drifted from the desired configuration.
* "Convergence" is the process of applying the desired state against the actual state.

Concepts/drift_graphic.md:

Convergence actions are then reported.

(Skip the next slide.)

Concepts/example.md:

Resources contain "attributes" that we can set. (Skip straight on.)

Concepts/idempotent.md:

Idempotence.

(Read the definition out.)

Examples of commands that are idempotent:
* ls
* touch /reconfigure

Examples of commands that are not idempotent:
* logger -p
* mkfs

Understanding idempotency is important when writing Puppet code.

Concepts/imperative.md:
Concepts/infrastructure_as_code.md:

We like to say that "Puppet code is executable documentation".  It's "descriptive, straightforward, transparent".  I'm really talking this up!

Concepts/language_overview.md:

* The basic building blocks of Puppet code are "resources".
* Resources are also known as "types" or "resource types".

Concepts/puppet_way.md:

Puppet solves all of these problems we've been discussing.
 
(DON'T discuss the code until the next slide!)

Concepts/shell_script.md:

Okay, so sooner or later a sysadmin is going to get sick of this and will write something like this.
 
* Who thinks this is a well-written script?
* Who thinks it's terrible?
* Who can understand it?
* Can anyone see any obvious problems?

(Go to next slide to discuss problems.)

Concepts/the_problem.md:

(Read this slide from the top, slowly, word for word.)

Concepts/traditional_problems.md:

Let's imagine we want this use added on multiple platforms.
* (useradd or adduser) Who knows what the difference is between useradd and adduser?
* (superadduser) Who knows what superadduser is?
* (-l -L) Who uses the -l and/or the -L option?
* (idempotency) What happens if I run the useradd command twice?

Concepts/traditional_solutions.md:

We have the following tools that can help us.

Defined_Resources/Objectives.md:

As in other languages, we try to avoid repeated code defining macros or functions or procedures or subroutines, and in Puppet we have "defined resources" or "defined types".

Defined_Resources/all_together.md:

Now that we have defined our vhost type we can apply it as many times as we like on the same node, and this will save us time and avoid errors.

Defined_Resources/example.md:

* Here is a more complicated example.
* Imagine lots of Apache conf files that depend on a number of variables.
* Note that most of these variables will be used inside the ERB template, so we can't see them here.
* Also notice how we have used the magic variable $name in the file title.

Defined_Resources/module_structure.md:

* Now let's talk about *where* we define defined types in our module structure.
* We follow the same convention as with classes.
* (example) So if we want to define a type 'apache::vhost' in our apache module, it will be inside file apache/manifests/vhost.pp.
Is everyone clear about this?

Defined_Resources/overview.md:

* (start with example of four file resources /tmp/miss_piggy, /tmp/kermit, /tmp/fozzie_bear, /tmp/beaker.)
* This saves time, abstracts away complexity and reduces error.

Defined_Resources/uniqueness.md:

* A perhaps surprising aspect of defined types is the names of resources inside them are not protected.
* (Go back to three files example using a title 'foo'.)
* So in the apahce example we're using $name in the name of the conf file.

Defined_Resources/with_template.md:

Point out that the variables passed in this example are used inside the template.

Templates/Objectives.md:

In this lesson we'll talk about:
* ERB templates, which we use to add dynamic content to files.

Templates/Separation_of_concerns.md:

(Ignore first 3 bullets.)
 
* ERB templates allow us to hide the complexity of dynamic content in files from our manifests.
* Another benefit is we can update our files without changing the manifests (reduces the likelihood of introducing errors).
